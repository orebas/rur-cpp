--- a/src/axf4_lib.c
+++ b/src/axf4_lib.c
@@ -1234,10 +1234,19 @@ void f4_symbol()
 	}
 
 		for (l=i=0; i < f4_aload; i++) l += f4_array[i]->len;
-		printf("%lld x %lld with %lld non-zero, %.1f per row\n", 
-			(long long int)f4_aload,
-			(long long int)f4_uload,
-			(long long int)l,
-			(double)l/f4_aload
-		);
+		if (f4_aload == 0) {
+			printf("0 x %lld with 0 non-zero, 0.0 per row\n", 
+				(long long int)f4_uload
+			);
+		} else {
+			printf("%lld x %lld with %lld non-zero, %.1f per row\n", 
+				(long long int)f4_aload,
+				(long long int)f4_uload,
+				(long long int)l,
+				(double)l/f4_aload
+			);
+		}
 
 	/* monomial array size */
@@ -2459,10 +2468,28 @@ void f4gb_mod()
 		}
 
 		t1 = realtime();
 		printf("new=%lld basis=%lld extra=%lld, step time=%.3f sec\n", (long long int)f4_aload, (long long int)f4_bload, (long long int)f4_eload, t1-t0);
+		
+		/* Safety check: detect infinite loop condition */
+		if (f4_aload == 0 && f4_pload > 0) {
+			printf("\nWARNING: No new polynomials generated but %lld pairs remain.\n", 
+				   (long long int)f4_pload);
+			printf("This may indicate a numerical issue with prime p=%lld\n", 
+				   (long long int)p);
+			
+			/* Clear remaining pairs to exit gracefully */
+			for (i = 0; i < f4_pload; i++) {
+				if (f4_pairs[i]) {
+					free(f4_pairs[i]);
+				}
+			}
+			f4_pload = 0;
+			printf("Terminating computation to prevent infinite loop.\n");
+		}
 	}
 	printf("\nDONE inter-reduce\n");
 
 	f4_output();
 	f4_remove();
 	f4_symbol();