cmake_minimum_required(VERSION 3.16)

# Set the vcpkg toolchain before project()
if(NOT DEFINED CMAKE_TOOLCHAIN_FILE)
    set(CMAKE_TOOLCHAIN_FILE "${CMAKE_CURRENT_SOURCE_DIR}/vcpkg/scripts/buildsystems/vcpkg.cmake"
        CACHE STRING "Vcpkg toolchain file")
endif()

project(rur-cpp)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Add debug flags for memory issues and undefined behavior
set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -fsanitize=address,undefined -fno-omit-frame-pointer -g")
set(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -fsanitize=address,undefined -fno-omit-frame-pointer -g")
set(CMAKE_EXE_LINKER_FLAGS_DEBUG "${CMAKE_EXE_LINKER_FLAGS_DEBUG} -fsanitize=address,undefined")

# Find FLINT manually (vcpkg doesn't provide config files)
find_library(FLINT_LIBRARY NAMES flint PATHS ${CMAKE_CURRENT_SOURCE_DIR}/vcpkg/installed/x64-linux/lib NO_DEFAULT_PATH)
find_path(FLINT_INCLUDE_DIR flint/flint.h PATHS ${CMAKE_CURRENT_SOURCE_DIR}/vcpkg/installed/x64-linux/include NO_DEFAULT_PATH)

if(NOT FLINT_LIBRARY OR NOT FLINT_INCLUDE_DIR)
    message(FATAL_ERROR "FLINT library not found. Make sure vcpkg install flint has been run.")
endif()

# Configuration options for FLINT/ARB support
option(USE_FLINT_ARB "Enable FLINT with ARB support (requires compatible versions)" OFF)

# Find GMP, MPFR (FLINT dependencies)
find_library(GMP_LIBRARY NAMES gmp PATHS ${CMAKE_CURRENT_SOURCE_DIR}/vcpkg/installed/x64-linux/lib NO_DEFAULT_PATH)
find_library(GMPXX_LIBRARY NAMES gmpxx PATHS ${CMAKE_CURRENT_SOURCE_DIR}/vcpkg/installed/x64-linux/lib NO_DEFAULT_PATH)
find_library(MPFR_LIBRARY NAMES mpfr PATHS ${CMAKE_CURRENT_SOURCE_DIR}/vcpkg/installed/x64-linux/lib NO_DEFAULT_PATH)

# Optional ARB support
if(USE_FLINT_ARB)
    find_library(ARB_LIBRARY NAMES arb PATHS ${CMAKE_CURRENT_SOURCE_DIR}/vcpkg/installed/x64-linux/lib NO_DEFAULT_PATH)
    if(NOT ARB_LIBRARY)
        message(FATAL_ERROR "ARB library not found. Run 'vcpkg install arb' or set USE_FLINT_ARB=OFF")
    endif()
    message(STATUS "ARB support enabled - using libarb for complex polynomial root finding")
    set(ARB_LIBRARIES ${ARB_LIBRARY})
    add_compile_definitions(HAVE_FLINT_ARB)
else()
    message(STATUS "ARB support disabled - using Eigen fallback for complex polynomial root finding")
    set(ARB_LIBRARIES "")
endif()

# Create FLINT interface library
add_library(flint::flint INTERFACE IMPORTED)
target_link_libraries(flint::flint INTERFACE ${FLINT_LIBRARY} ${ARB_LIBRARIES} ${GMPXX_LIBRARY} ${GMP_LIBRARY} ${MPFR_LIBRARY})
target_include_directories(flint::flint INTERFACE ${FLINT_INCLUDE_DIR})

# Find Eigen3 using pkg-config
find_package(PkgConfig REQUIRED)
pkg_check_modules(EIGEN3 REQUIRED eigen3)

# Find nlohmann/json (header-only, just check include path)
find_path(NLOHMANN_JSON_INCLUDE_DIR nlohmann/json.hpp PATHS /usr/include /usr/local/include)
if(NOT NLOHMANN_JSON_INCLUDE_DIR)
    message(FATAL_ERROR "nlohmann/json not found. Please install nlohmann-json3-dev package.")
endif()

# Add source files
set(SOURCES
    src/monomial.cpp
    src/polynomial.cpp
    src/axf4_wrapper.c
    src/f4_solver.cpp
    src/axf4_lib.c
    src/quotient_ring.cpp
    src/bivariate_lex.cpp
    src/rur_solver.cpp
    src/direct_rur_solver.cpp
    src/flint_reducer.cpp
    src/flint_linear_solver.cpp
    src/polynomial_basis.cpp
    src/flint_reducer_v2.cpp
    src/flint_mpoly_wrappers.cpp
    src/flint_linear_algebra.cpp
    src/flint_rur_solver.cpp
    src/julia_rur/data_structures.cpp
    src/julia_rur/multiplication_tables.cpp
    src/julia_rur/bivariate_algorithm.cpp
    src/julia_rur/multi_modular.cpp
    src/julia_rur/quotient_basis.cpp
    src/julia_rur/f4_monomial_decoder.cpp
    src/julia_rur/f4_integration.cpp
    src/julia_rur/univariate_parameterization.cpp
    src/julia_rur/separating_element_search.cpp
    src/julia_rur/rur_main_algorithm.cpp
    src/julia_rur/numerical_roots_eigen.cpp
    src/julia_rur/polynomial_solver.cpp
    $<$<BOOL:${USE_FLINT_ARB}>:src/julia_rur/numerical_roots_flint.cpp>
    $<$<NOT:$<BOOL:${USE_FLINT_ARB}>>:src/julia_rur/numerical_roots_flint_stub.cpp>
    src/julia_rur/polynomial_solver_enhanced.cpp
    src/julia_rur/f4_polynomial_formatter.cpp
)

# Create library
add_library(rur STATIC ${SOURCES})

target_include_directories(rur PUBLIC 
    src/
    ${EIGEN3_INCLUDE_DIRS}
    ${NLOHMANN_JSON_INCLUDE_DIR}
)

target_link_libraries(rur PUBLIC 
    flint::flint
    ${EIGEN3_LIBRARIES}
    m  # Math library for axf4.c
)

# Test executables
add_executable(test_basic test/test_basic.cpp)
target_link_libraries(test_basic rur)

add_executable(test_f4_wrapper test/test_f4_wrapper.cpp)
target_link_libraries(test_f4_wrapper rur)

add_executable(test_f4_simple test/test_f4_simple.cpp)
target_link_libraries(test_f4_simple rur)

add_executable(test_rur_solver test/test_rur_solver.cpp)
target_link_libraries(test_rur_solver rur)

add_executable(test_debug_gb test/test_debug_gb.cpp)
target_link_libraries(test_debug_gb rur)

add_executable(test_raw_axf4 test/test_raw_axf4.cpp)
target_link_libraries(test_raw_axf4 rur)

add_executable(test_json_input test/test_json_input.cpp)
target_link_libraries(test_json_input rur)

add_executable(test_direct_rur test/test_direct_rur.cpp)
target_link_libraries(test_direct_rur rur)

add_executable(test_flint_linear_algebra test/test_flint_linear_algebra.cpp)
target_link_libraries(test_flint_linear_algebra rur)

add_executable(test_flint_rur_solver test/test_flint_rur_solver.cpp)
target_link_libraries(test_flint_rur_solver rur)

add_executable(test_julia_data_structures test/test_julia_data_structures.cpp)
target_link_libraries(test_julia_data_structures rur)

add_executable(test_multiplication_tables test/test_multiplication_tables.cpp)
target_link_libraries(test_multiplication_tables rur)

add_executable(test_bivariate_algorithm test/test_bivariate_algorithm.cpp)
target_link_libraries(test_bivariate_algorithm rur)

add_executable(test_multi_modular test/test_multi_modular.cpp)
target_link_libraries(test_multi_modular rur)

add_executable(test_f4_structured_api test/test_f4_structured_api.cpp)
target_link_libraries(test_f4_structured_api rur)

add_executable(test_f4_simple_structured test/test_f4_simple_structured.cpp)
target_link_libraries(test_f4_simple_structured rur)

add_executable(test_f4_debug_structured test/test_f4_debug_structured.cpp)
target_link_libraries(test_f4_debug_structured rur)

add_executable(test_f4_format_debug test/test_f4_format_debug.cpp)
target_link_libraries(test_f4_format_debug rur)

add_executable(test_quotient_basis test/test_quotient_basis.cpp)
target_link_libraries(test_quotient_basis rur)

add_executable(test_f4_quotient_basis_integration test/test_f4_quotient_basis_integration.cpp)
target_link_libraries(test_f4_quotient_basis_integration rur)

add_executable(test_f4_multiplication_tables test/test_f4_multiplication_tables.cpp)
target_link_libraries(test_f4_multiplication_tables rur)

add_executable(test_debug_f4_output test/test_debug_f4_output.cpp)
target_link_libraries(test_debug_f4_output rur)

add_executable(demo_rur demo/demo_rur.cpp)
target_link_libraries(demo_rur rur)

add_executable(test_rational_reconstruction test/test_rational_reconstruction.cpp)
target_link_libraries(test_rational_reconstruction rur)

add_executable(test_simple_rational_reconstruction test/test_simple_rational_reconstruction.cpp)
target_link_libraries(test_simple_rational_reconstruction rur)

add_executable(test_simple_rur test/test_simple_rur.cpp)
target_link_libraries(test_simple_rur rur)

add_executable(test_rational_no_verify test/test_rational_no_verify.cpp)
target_link_libraries(test_rational_no_verify rur)

add_executable(test_numerical_roots_eigen test/test_numerical_roots_eigen.cpp)
target_link_libraries(test_numerical_roots_eigen rur)

add_executable(test_polynomial_solver test/test_polynomial_solver.cpp)
target_link_libraries(test_polynomial_solver rur)

add_executable(test_multivariate_debug test/test_multivariate_debug.cpp)
target_link_libraries(test_multivariate_debug rur)

add_executable(test_multivariate_rational test/test_multivariate_rational.cpp)
target_link_libraries(test_multivariate_rational rur)

add_executable(test_f4_multivariate test/test_f4_multivariate.cpp)
target_link_libraries(test_f4_multivariate rur)

add_executable(test_multivariate_primes test/test_multivariate_primes.cpp)
target_link_libraries(test_multivariate_primes rur)

add_executable(test_simple_multivariate test/test_simple_multivariate.cpp)
target_link_libraries(test_simple_multivariate rur)

add_executable(test_linear_debug test/test_linear_debug.cpp)
target_link_libraries(test_linear_debug rur)

add_executable(test_linear_rur test/test_linear_rur.cpp)
target_link_libraries(test_linear_rur rur)

add_executable(test_linear_debug2 test/test_linear_debug2.cpp)
target_link_libraries(test_linear_debug2 rur)

add_executable(test_linear_simple test/test_linear_simple.cpp)
target_link_libraries(test_linear_simple rur)

add_executable(test_linear_verbose test/test_linear_verbose.cpp)
target_link_libraries(test_linear_verbose rur)

add_executable(test_f4_crash_debug test/test_f4_crash_debug.cpp)
target_link_libraries(test_f4_crash_debug rur)

add_executable(test_f4_single_thread test/test_f4_single_thread.cpp)
target_link_libraries(test_f4_single_thread rur)

add_executable(test_x2_minus_2_debug test/test_x2_minus_2_debug.cpp)
target_link_libraries(test_x2_minus_2_debug rur)

add_executable(test_f4_parsing test/test_f4_parsing.cpp)
target_link_libraries(test_f4_parsing rur)

add_executable(test_x2_minus_2_formatter test/test_x2_minus_2_formatter.cpp)
target_link_libraries(test_x2_minus_2_formatter rur)

add_executable(test_f4_negative_parsing test/test_f4_negative_parsing.cpp)
target_link_libraries(test_f4_negative_parsing rur)

add_executable(test_minimal_poly_debug test/test_minimal_poly_debug.cpp)
target_link_libraries(test_minimal_poly_debug rur)

add_executable(test_crt_reconstruction_debug test/test_crt_reconstruction_debug.cpp)
target_link_libraries(test_crt_reconstruction_debug rur)

add_executable(test_reconstruction_issue test/test_reconstruction_issue.cpp)
target_link_libraries(test_reconstruction_issue rur)

add_executable(test_x2_small_prime test/test_x2_small_prime.cpp)
target_link_libraries(test_x2_small_prime rur)

add_executable(test_debug_rational_coeff test/test_debug_rational_coeff.cpp)
target_link_libraries(test_debug_rational_coeff rur)

add_executable(test_polynomial_printing test/test_polynomial_printing.cpp)
target_link_libraries(test_polynomial_printing rur)

add_executable(test_poly_solver_debug test/test_poly_solver_debug.cpp)
target_link_libraries(test_poly_solver_debug rur)

add_executable(test_complete_x2_trace test/test_complete_x2_trace.cpp)
target_link_libraries(test_complete_x2_trace rur)

add_executable(test_eigen_roots_debug test/test_eigen_roots_debug.cpp)
target_link_libraries(test_eigen_roots_debug rur)

add_executable(test_solver_roots_debug test/test_solver_roots_debug.cpp)
target_link_libraries(test_solver_roots_debug rur)

add_executable(test_cubic_debug test/test_cubic_debug.cpp)
target_link_libraries(test_cubic_debug rur)

add_executable(test_cubic_rur_debug test/test_cubic_rur_debug.cpp)
target_link_libraries(test_cubic_rur_debug rur)

add_executable(test_multivariate_simple_new test/test_multivariate_simple_new.cpp)
target_link_libraries(test_multivariate_simple_new rur)

# add_executable(test_f4_gb_consistency test/test_f4_gb_consistency.cpp)
# target_link_libraries(test_f4_gb_consistency rur)

add_executable(test_f4_gb_consistency_simple test/test_f4_gb_consistency_simple.cpp)
target_link_libraries(test_f4_gb_consistency_simple rur)

add_executable(test_multivariate_complex test/test_multivariate_complex.cpp)
target_link_libraries(test_multivariate_complex rur)

add_executable(test_simple_quadratic test/test_simple_quadratic.cpp)
target_link_libraries(test_simple_quadratic rur)

add_executable(test_separating_debug test/test_separating_debug.cpp)
target_link_libraries(test_separating_debug rur)

add_executable(test_circle_parabola_debug test/test_circle_parabola_debug.cpp)
target_link_libraries(test_circle_parabola_debug rur)

add_executable(test_variable_indexing test/test_variable_indexing.cpp)
target_link_libraries(test_variable_indexing rur)

add_executable(test_indexing_edge_cases test/test_indexing_edge_cases.cpp)
target_link_libraries(test_indexing_edge_cases rur)

add_executable(test_tensor_product_debug test/test_tensor_product_debug.cpp)
target_link_libraries(test_tensor_product_debug rur)

add_executable(test_polynomial_solver_enhanced test/test_polynomial_solver_enhanced.cpp)
target_link_libraries(test_polynomial_solver_enhanced rur)

add_executable(test_flint_arb_support test/test_flint_arb_support.cpp)
target_link_libraries(test_flint_arb_support rur)

# F4 wrapper (will be added later)
# add_subdirectory(axf4)
